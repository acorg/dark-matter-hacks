from unittest import TestCase

from dark import rocAnalysis




class TestCalculateFrequencies(TestCase):
    """
    Tests for the calculateFrequencies function
    """
    def testCalculateFrequenciesRaw(self):
        """
        calculateFrequencies for raw data must give the right result.
        """
        inDict = {'blastn4-545': {'60': 56, '65': 115, '80': 560, '85': 592, '25': 0, '20': 0, '45': 0, '40': 0, '0': 0, '5': 0, '99': 594, '75': 454, '70': 328, '90': 594, '100': 594, '95': 594, '10': 0, '15': 0, '55': 23, '30': 0, '50': 0, '35': 0}}
        outDict = rocAnalysis.calculateFrequencies(inDict)
        outResult = {'blastn4-545': {'raw': [594, 594, 594, 594, 592, 560, 454, 328, 115, 56, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}
        self.assertEqual(outDict['blastn4-545']['raw'], outResult['blastn4-545']['raw'])

    def testCalculateFrequenciesFprs(self):
        """
        calculateFrequencies for false positive rate must give the right result.
        """
        inDict = {'blastn4-545': {'60': 56, '65': 115, '80': 560, '85': 592, '25': 0, '20': 0, '45': 0, '40': 0, '0': 0, '5': 0, '99': 594, '75': 454, '70': 328, '90': 594, '100': 594, '95': 594, '10': 0, '15': 0, '55': 23, '30': 0, '50': 0, '35': 0}}
        outDict = rocAnalysis.calculateFrequencies(inDict)
        outResult = {'blastn4-545': {'fprs': [0.3134519801186468, 0.2791245791245791, 0.24118376749955697, 0.19902731013842126, 0.15210932857991682, 0.1026936026936027, 0.05858585858585859, 0.023328523328523327, 0.01023051023051023, 0.0032267115600448934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0]}}
        self.maxDiff = None
        self.assertEqual(outDict['blastn4-545']['fprs'], outResult['blastn4-545']['fprs'])

    def testCalculateFrequenciesTprs(self):
        """
        calculateFrequencies for true positive rate must give the right result.
        """
        inDict = {'blastn4-545': {'60': 56, '65': 115, '80': 560, '85': 592, '25': 0, '20': 0, '45': 0, '40': 0, '0': 0, '5': 0, '99': 594, '75': 454, '70': 328, '90': 594, '100': 594, '95': 594, '10': 0, '15': 0, '55': 23, '30': 0, '50': 0, '35': 0}}
        outDict = rocAnalysis.calculateFrequencies(inDict)
        outResult = {'blastn4-545': {'tprs': [1.0, 1.0, 1.0, 1.0, 0.9993265993265993, 0.98989898989899, 0.9576719576719577, 0.906986531986532, 0.8277216610549943, 0.7543771043771044, 0.6893174165901439, 0.6318742985409652, 0.5832685832685832, 0.5416065416065416, 0.5054994388327722, 0.4739057239057239, 0.44602891661715194, 0.4212495323606435, 0.39907850434166225, 0.37912457912457914, 0.3610710277376944, 0.34465870829507195]}}
        self.assertEqual(outDict['blastn4-545']['tprs'], outResult['blastn4-545']['tprs'])

    def testCalculateFrequenciesSpcs(self):
        """
        calculateFrequencies for specificity must give the right result.
        """
        inDict = {'blastn4-545': {'60': 56, '65': 115, '80': 560, '85': 592, '25': 0, '20': 0, '45': 0, '40': 0, '0': 0, '5': 0, '99': 594, '75': 454, '70': 328, '90': 594, '100': 594, '95': 594, '10': 0, '15': 0, '55': 23, '30': 0, '50': 0, '35': 0}}
        outDict = rocAnalysis.calculateFrequencies(inDict)
        outResult = {'blastn4-545': {'spcs': [0.6865480198813532, 0.7208754208754209, 0.758816232500443, 0.8009726898615788, 0.8478906714200832, 0.8973063973063973, 0.9414141414141414, 0.9766714766714767, 0.9897694897694898, 0.996773288439955, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0]}}
        self.maxDiff = None
        self.assertEqual(outDict['blastn4-545']['spcs'], outResult['blastn4-545']['spcs'])

    def testCalculateFrequenciesTps(self):
        """
        calculateFrequencies true positives must give the right result.
        """
        inDict = {'blastn4-545': {'60': 56, '65': 115, '80': 560, '85': 592, '25': 0, '20': 0, '45': 0, '40': 0, '0': 0, '5': 0, '99': 594, '75': 454, '70': 328, '90': 594, '100': 594, '95': 594, '10': 0, '15': 0, '55': 23, '30': 0, '50': 0, '35': 0}}
        outDict = rocAnalysis.calculateFrequencies(inDict)
        outResult = {'blastn4-545': {'tps': [594, 1188, 1782, 2376, 2968, 3528, 3982, 4310, 4425, 4481, 4504, 4504, 4504, 4504, 4504, 4504, 4504, 4504, 4504, 4504, 4504, 4504]}}
        self.maxDiff = None
        self.assertEqual(outDict['blastn4-545']['tps'], outResult['blastn4-545']['tps'])

    def testCalculateFrequenciesTns(self):
        """
        calculateFrequencies true negatives must give the right result.
        """
        inDict = {'blastn4-545': {'60': 56, '65': 115, '80': 560, '85': 592, '25': 0, '20': 0, '45': 0, '40': 0, '0': 0, '5': 0, '99': 594, '75': 454, '70': 328, '90': 594, '100': 594, '95': 594, '10': 0, '15': 0, '55': 23, '30': 0, '50': 0, '35': 0}}
        outDict = rocAnalysis.calculateFrequencies(inDict)
        outResult = {'blastn4-545': {'tns': [8564, 8564, 8564, 8564, 8562, 8528, 8388, 8122, 7643, 7105, 6534, 5940, 5346, 4752, 4158, 3564, 2970, 2376, 1782, 1188, 594, 0]}}
        self.assertEqual(outDict['blastn4-545']['tns'], outResult['blastn4-545']['tns'])

    def testCalculateFrequenciesFps(self):
        """
        calculateFrequencies false positives must give the right result.
        """
        inDict = {'blastn4-545': {'60': 56, '65': 115, '80': 560, '85': 592, '25': 0, '20': 0, '45': 0, '40': 0, '0': 0, '5': 0, '99': 594, '75': 454, '70': 328, '90': 594, '100': 594, '95': 594, '10': 0, '15': 0, '55': 23, '30': 0, '50': 0, '35': 0}}
        outDict = rocAnalysis.calculateFrequencies(inDict)
        outResult = {'blastn4-545': {'fps': [3910, 3316, 2722, 2128, 1536, 976, 522, 194, 79, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}
        self.maxDiff = None
        self.assertEqual(outDict['blastn4-545']['fps'], outResult['blastn4-545']['fps'])

    def testCalculateFrequenciesFns(self):
        """
        calculateFrequencies for false negatives must give the right result.
        """
        inDict = {'blastn4-545': {'60': 56, '65': 115, '80': 560, '85': 592, '25': 0, '20': 0, '45': 0, '40': 0, '0': 0, '5': 0, '99': 594, '75': 454, '70': 328, '90': 594, '100': 594, '95': 594, '10': 0, '15': 0, '55': 23, '30': 0, '50': 0, '35': 0}}
        outDict = rocAnalysis.calculateFrequencies(inDict)
        outResult = {'blastn4-545': {'fns': [0, 0, 0, 0, 2, 36, 176, 442, 921, 1459, 2030, 2624, 3218, 3812, 4406, 5000, 5594, 6188, 6782, 7376, 7970, 8564]}}
        self.maxDiff = None
        self.assertEqual(outDict['blastn4-545']['fns'], outResult['blastn4-545']['fns'])

class TestYoudenIndex(TestCase):
    """
    Tests for the youden index calculation.
    """
    def testYoudenIndexCoords(self):
        """
        The coordinates of the youden index must be right.
        """
        inDict = {'blastn4-545': {'spcs': [0.6865480198813532, 0.7208754208754209, 0.758816232500443, 0.8009726898615788, 0.8478906714200832, 0.8973063973063973, 0.9414141414141414, 0.9766714766714767, 0.9897694897694898, 0.996773288439955, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0], 'fprs': [0.3134519801186468, 0.2791245791245791, 0.24118376749955697, 0.19902731013842126, 0.15210932857991682, 0.1026936026936027, 0.05858585858585859, 0.023328523328523327, 0.01023051023051023, 0.0032267115600448934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0], 'tprs': [1.0, 1.0, 1.0, 1.0, 0.9993265993265993, 0.98989898989899, 0.9576719576719577, 0.906986531986532, 0.8277216610549943, 0.7543771043771044, 0.6893174165901439, 0.6318742985409652, 0.5832685832685832, 0.5416065416065416, 0.5054994388327722, 0.4739057239057239, 0.44602891661715194, 0.4212495323606435, 0.39907850434166225, 0.37912457912457914, 0.3610710277376944, 0.34465870829507195]}}
        youdenCoords, cutoff = rocAnalysis.youdenIndex(inDict)
        resultCoords = [(0.9576719576719577, 0.05858585858585859)]
        self.assertEqual(youdenCoords, resultCoords)

    def testYoudenIndexCutoff(self):
        """
        The cutoff of the youden index must be right.
        """
        inDict = {'blastn4-545': {'spcs': [0.6865480198813532, 0.7208754208754209, 0.758816232500443, 0.8009726898615788, 0.8478906714200832, 0.8973063973063973, 0.9414141414141414, 0.9766714766714767, 0.9897694897694898, 0.996773288439955, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0], 'fprs': [0.3134519801186468, 0.2791245791245791, 0.24118376749955697, 0.19902731013842126, 0.15210932857991682, 0.1026936026936027, 0.05858585858585859, 0.023328523328523327, 0.01023051023051023, 0.0032267115600448934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0], 'tprs': [1.0, 1.0, 1.0, 1.0, 0.9993265993265993, 0.98989898989899, 0.9576719576719577, 0.906986531986532, 0.8277216610549943, 0.7543771043771044, 0.6893174165901439, 0.6318742985409652, 0.5832685832685832, 0.5416065416065416, 0.5054994388327722, 0.4739057239057239, 0.44602891661715194, 0.4212495323606435, 0.39907850434166225, 0.37912457912457914, 0.3610710277376944, 0.34465870829507195]}}
        youdenCoords, cutoff = rocAnalysis.youdenIndex(inDict)
        resultCutoff = [6]
        self.assertEqual(cutoff, resultCutoff)


class TestF1Index(TestCase):
    """
    Tests for the f1 index calculation.
    """
    def testF1IndexCoords(self):
        """
        The coordinates of the f1 index must be right.
        """
        inDict = {'blastn4-545': {'spcs': [0.6865480198813532, 0.7208754208754209, 0.758816232500443, 0.8009726898615788, 0.8478906714200832, 0.8973063973063973, 0.9414141414141414, 0.9766714766714767, 0.9897694897694898, 0.996773288439955, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0], 'fprs': [0.3134519801186468, 0.2791245791245791, 0.24118376749955697, 0.19902731013842126, 0.15210932857991682, 0.1026936026936027, 0.05858585858585859, 0.023328523328523327, 0.01023051023051023, 0.0032267115600448934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0], 'tprs': [1.0, 1.0, 1.0, 1.0, 0.9993265993265993, 0.98989898989899, 0.9576719576719577, 0.906986531986532, 0.8277216610549943, 0.7543771043771044, 0.6893174165901439, 0.6318742985409652, 0.5832685832685832, 0.5416065416065416, 0.5054994388327722, 0.4739057239057239, 0.44602891661715194, 0.4212495323606435, 0.39907850434166225, 0.37912457912457914, 0.3610710277376944, 0.34465870829507195]}}
        youdenCoords, cutoff = rocAnalysis.f1Index(inDict)
        resultCoords = [(0.9576719576719577, 0.05858585858585859)]
        self.assertEqual(youdenCoords, resultCoords)

    def testF1IndexCutoff(self):
        """
        The cutoff of the f1 index must be right.
        """
        inDict = {'blastn4-545': {'spcs': [0.6865480198813532, 0.7208754208754209, 0.758816232500443, 0.8009726898615788, 0.8478906714200832, 0.8973063973063973, 0.9414141414141414, 0.9766714766714767, 0.9897694897694898, 0.996773288439955, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0], 'fprs': [0.3134519801186468, 0.2791245791245791, 0.24118376749955697, 0.19902731013842126, 0.15210932857991682, 0.1026936026936027, 0.05858585858585859, 0.023328523328523327, 0.01023051023051023, 0.0032267115600448934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0], 'tprs': [1.0, 1.0, 1.0, 1.0, 0.9993265993265993, 0.98989898989899, 0.9576719576719577, 0.906986531986532, 0.8277216610549943, 0.7543771043771044, 0.6893174165901439, 0.6318742985409652, 0.5832685832685832, 0.5416065416065416, 0.5054994388327722, 0.4739057239057239, 0.44602891661715194, 0.4212495323606435, 0.39907850434166225, 0.37912457912457914, 0.3610710277376944, 0.34465870829507195]}}
        youdenCoords, cutoff = rocAnalysis.f1Index(inDict)
        resultCutoff = [6]
        self.assertEqual(cutoff, resultCutoff)


class TestAreaUnderCurve(TestCase):
    """
    Tests for Area under curve.
    """
    def testAreaUnderCurve(self):
        """
        Area under curve must be calculated correctly.
        """
        inDict = {'blastn4-545': {'fprs': [0.3134519801186468, 0.2791245791245791, 0.24118376749955697, 0.19902731013842126, 0.15210932857991682, 0.1026936026936027, 0.05858585858585859, 0.023328523328523327, 0.01023051023051023, 0.0032267115600448934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0], 'tprs': [1.0, 1.0, 1.0, 1.0, 0.9993265993265993, 0.98989898989899, 0.9576719576719577, 0.906986531986532, 0.8277216610549943, 0.7543771043771044, 0.6893174165901439, 0.6318742985409652, 0.5832685832685832, 0.5416065416065416, 0.5054994388327722, 0.4739057239057239, 0.44602891661715194, 0.4212495323606435, 0.39907850434166225, 0.37912457912457914, 0.3610710277376944, 0.34465870829507195]}}
        integrated = rocAnalysis.areaUnderCurve(inDict)
        integratedResult = {'blastn4-545': 0.99207747142200531}
        self.assertEqual(integrated, integratedResult)

    def testAreaUnderCurveIndex(self):
        """
        The order of the area under curve must be calculated correctly.
        """
        inDict = {'blastn4-545': 0.99207747142200531, 'blastn1-545': 0.89207747142200531}
        sortedIndict = rocAnalysis.areaUnderCurveIndex(inDict)
        resultSorted = {'blastn1-545': 1, 'blastn4-545': 0}
        self.assertEqual(sortedIndict, resultSorted)
    


